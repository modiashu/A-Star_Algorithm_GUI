%% File name: AStarApplication.m
%  Author: Palak Dave, Ashutosh Modi
%  Description: This file handles callback functions for
%               AStarApplication.fig GUI application. This .m file acts as
%               an interface to AStar algorithm and other functionalities.
%
%  Date: Oct 30, 2017.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function varargout = AStarApplication(varargin)
%% Autogenerated comments by MATLAB
% ASTARAPPLICATION MATLAB code for AStarApplication.fig
%      ASTARAPPLICATION, by itself, creates a new ASTARAPPLICATION or raises the existing
%      singleton*.
%
%      H = ASTARAPPLICATION returns the handle to a new ASTARAPPLICATION or the handle to
%      the existing singleton*.
%
%      ASTARAPPLICATION('CALLBACK',hObject,eventData,handles,...) calls the local
%      function named CALLBACK in ASTARAPPLICATION.M with the given input arguments.
%
%      ASTARAPPLICATION('Property','Value',...) creates a new ASTARAPPLICATION or raises the
%      existing singleton*.  Starting from the left, property value pairs are
%      applied to the GUI before AStarApplication_OpeningFcn gets called.  An
%      unrecognized property name or invalid value makes property application
%      stop.  All inputs are passed to AStarApplication_OpeningFcn via varargin.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES

% Edit the above text to modify the response to help AStarApplication

% Last Modified by GUIDE v2.5 30-Oct-2017 11:03:30

% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @AStarApplication_OpeningFcn, ...
                   'gui_OutputFcn',  @AStarApplication_OutputFcn, ...
                   'gui_LayoutFcn',  [] , ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT


% --- Executes just before AStarApplication is made visible.
function AStarApplication_OpeningFcn(hObject, eventdata, handles, varargin)
% This function has no output args, see OutputFcn.
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% varargin   command line arguments to AStarApplication (see VARARGIN)

clc;

% Choose default command line output for AStarApplication
handles.output = hObject;

% Update handles structure
guidata(hObject, handles);
global excludedNodes;
global showSteps;
excludedNodes={};

% Enable show steps
set(handles.showStepscheckBox, 'Value', 1);
showSteps = true;
movegui('center');


% UIWAIT makes AStarApplication wait for user response (see UIRESUME)
% uiwait(handles.figure1);


% --- Outputs from this function are returned to the command line.
function varargout = AStarApplication_OutputFcn(hObject, eventdata, handles) 
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Get default command line output from handles structure
varargout{1} = handles.output;


% --- Executes on selection change in srcPopUp.
function srcPopUp_Callback(hObject, eventdata, handles)
% hObject    handle to srcPopUp (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: contents = cellstr(get(hObject,'String')) returns srcPopUp contents as cell array
%        contents{get(hObject,'Value')} returns selected item from srcPopUp

% Get source node selected from the drop down menu
global startNode;
items = get(hObject,'String');
index_selected  = get(hObject,'Value');
startNode = items{index_selected};
text = strcat('Start Node :: ', startNode);
set(handles.messageText, 'String', text);
%disp(startNode); %For debugging purpose



% --- Executes during object creation, after setting all properties.
function srcPopUp_CreateFcn(hObject, eventdata, handles)
% hObject    handle to srcPopUp (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: popupmenu controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on selection change in destPopUp.
function destPopUp_Callback(hObject, eventdata, handles)
% hObject    handle to destPopUp (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: contents = cellstr(get(hObject,'String')) returns destPopUp contents as cell array
%        contents{get(hObject,'Value')} returns selected item from destPopUp

% Get end node selected from the drop down menu
global destNode;
items = get(hObject,'String');
index_selected  = get(hObject,'Value');
destNode = items{index_selected};
text = strcat('Destination Node :: ', destNode);
set(handles.messageText, 'String', text);

% --- Executes during object creation, after setting all properties.
function destPopUp_CreateFcn(hObject, eventdata, handles)
% hObject    handle to destPopUp (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: popupmenu controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on button press in runButton.
function runButton_Callback(hObject, eventdata, handles)
% hObject    handle to runButton (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

global heuristic;
global path;
heuristicObj = get(handles.heuristicUiButtonGroup, 'SelectedObject');
heuristicName = get(heuristicObj, 'String');
switch (heuristicName)
    case 'Straight line dist'
        disp('Straight line dist');
        heuristic = 1;
    case 'Fewest links'
        disp('Fewest links');
        heuristic = 2;
end
% CreateGraph();
% Get start node
global startNode;
items = get(handles.srcPopUp,'String');
index_selected  = get(handles.srcPopUp,'Value');
startNode = items{index_selected};

% Get destination node
global destNode;
items = get(handles.destPopUp,'String');
index_selected  = get(handles.destPopUp,'Value');
destNode = items{index_selected};

% Call A* algorithm
set(handles.messageText, 'String', 'Searching Path...');
tic;
valid = AStar();
toc;
if(false == valid)
    %disp('No path found.');
    set(handles.messageText, 'String', 'No path found..  :( ');
    return;
end
set(handles.messageText, 'String', 'Hurray!! Path found...');




% --- Executes on button press in reset.
function reset_Callback(hObject, eventdata, handles)
% hObject    handle to reset (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global copyNetworkData;
global networkData;
global sourceNodes;
global terminatingNodes;
global edgeWeight;
global graphPlot;
global excludedNodes;
excludedNodes={};
networkData = copyNetworkData;
[sourceNodes, terminatingNodes, edgeWeight] = CreateGraphEntities();
CreateDirectionalGraph();
%set(handles.graphAxes,'UserData',graphPlot);
set (graphPlot, 'ButtonDownFcn', @mouseButtonDownCallback);
set (gcf, 'WindowButtonMotionFcn', @mouseMotionCallback);
set (gcf, 'WindowButtonUpFcn', {@mouseButtonUpCallback});
set(handles.messageText, 'String', 'Ready...');


% --- If Enable == 'on', executes on mouse press in 5 pixel border.
% --- Otherwise, executes on mouse press in 5 pixel border or over srcPopUp.
function srcPopUp_ButtonDownFcn(hObject, eventdata, handles)
% hObject    handle to srcPopUp (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% --- Executes on button press in showStepscheckBox.
function showStepscheckBox_Callback(hObject, eventdata, handles)
% hObject    handle to showStepscheckBox (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of showStepscheckBox
global showSteps;
showSteps = get(handles.showStepscheckBox, 'Value');
disp(showSteps);

% --- Executes on button press in ConnectionsBrowse.
function ConnectionsBrowse_Callback(hObject, eventdata, handles)
% hObject    handle to ConnectionsBrowse (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global networkData;
global sourceNodes;
global terminatingNodes;
global edgeWeight;
networkData= {zeros()};
set(handles.messageText, 'String', 'Loading Connections...');
[connFileName,connPathName,FilterIndex] = uigetfile('../*.txt', 'Select connections text file');
%valid = ConnectionsReading('connections.txt'); %For debugging purpose
if(FilterIndex ~= 1)
    %disp('Invalid connections file or path!!');
    set(handles.messageText, 'String', 'Invalid connections file or path!!');
    return;
end
valid = ConnectionsReading(strcat(connPathName,connFileName));
if(false == valid)
    return;
end

set(handles.connectionEditText, 'String', strcat(connPathName,connFileName));
set(handles.messageText, 'String', 'Connections loaded successfully...');
% load nodes to pop-ups for src and dst nodes
set(handles.srcPopUp,'String',networkData(:,1),'Value',1);  
set(handles.destPopUp,'String',networkData(:,1),'Value',1);
%[sourceNodes, terminatingNodes, edgeWeight] = CreateGraphEntities();




% --- Executes on button press in locationBrowse.
function locationBrowse_Callback(hObject, eventdata, handles)
% hObject    handle to locationBrowse (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global networkData; 
global graphPlot;
global sourceNodes;
global terminatingNodes;
global edgeWeight;
global copyNetworkData;
set(handles.messageText, 'String', 'Loading Locations...');
[locFileName,locPathName,FilterIndex] = uigetfile('../*.txt', 'Select locations text file');
if(FilterIndex ~= 1)
    %disp('Invalid locations file or path!!');
    set(handles.messageText, 'String', 'Invalid locations file or path!!');
    return;
end
%valid = LocationReading('locations.txt'); %For debugging purpose
valid = LocationReading(strcat(locPathName,locFileName));
if(false == valid)
    return;
end

set(handles.locationsEditText, 'String', strcat(locPathName,locFileName));
set(handles.messageText, 'String', 'Locations loaded successfully...');

[sourceNodes, terminatingNodes, edgeWeight] = CreateGraphEntities();
CreateDirectionalGraph();
%set(handles.graphAxes,'UserData',graphPlot);
set (graphPlot, 'ButtonDownFcn', @mouseButtonDownCallback);
set (gcf, 'WindowButtonMotionFcn', @mouseMotionCallback);
set (gcf, 'WindowButtonUpFcn', {@mouseButtonUpCallback});
% Create a copy of network data
copyNetworkData = networkData;
%disp('Copied');


function connectionEditText_Callback(hObject, eventdata, handles)
% hObject    handle to connectionEditText (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of connectionEditText as text
%        str2double(get(hObject,'String')) returns contents of connectionEditText as a double


% --- Executes during object creation, after setting all properties.
function connectionEditText_CreateFcn(hObject, eventdata, handles)
% hObject    handle to connectionEditText (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function edit2_Callback(hObject, eventdata, handles)
% hObject    handle to locationsEditText (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of locationsEditText as text
%        str2double(get(hObject,'String')) returns contents of locationsEditText as a double


% --- Executes during object creation, after setting all properties.
function locationsEditText_CreateFcn(hObject, eventdata, handles)
% hObject    handle to locationsEditText (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end
